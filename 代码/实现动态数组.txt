实现动态数组


使用面向对象或者面向结构编程，实现可以动态增长或缩减容量的数组，要求：

（1）数据结构使用int类型的动态数组用于存储数据，

（2）数据结构要记录一个最大容量和实际容量两个变量

（3）数据结构使用pop，head，push，del四个函数，分别表示从尾部弹出数据，从头部弹出数据，在尾部附加数据，从任意位置删除数据元素。

（4）数据结构重载[]运算符，读取某一位置的数据。

输入：

输入一个整型数据n初始化动态数组大小

输入p（>=n）个整数使用push存储到动态数组中

再输入q（>=p）个整数使用push存储到动态数组中

输入一个整型数据index用于删除指定位置的数


输出

输出动态数组的实际容量

输出动态数组的所有元素

在调用pop和head函数后，输出动态数组的所有元素

sample inpput and output
样例1
input:
3
1 2 3
4 5 6 7 8
0
output:
7
2 3 4 5 6 7 8
3 4 5 6 7
样例2
input:
2
1 2 3 4
5 6 7 8 9
1
output:
8
1 3 4 5 6 7 8 9
3 4 5 6 7 8

//***********************************************//
#include<iostream>
#include<vector>

using namespace std;

class DynamicArray {
private:
	vector<int>data;
	int maxCapacity;
	int actualCapacity;
public:
	DynamicArray(int n) :
		maxCapacity(n), actualCapacity(0) {
		data.reserve(maxCapacity);
	}
	void push(int value) {
		if (actualCapacity >= maxCapacity) {
			maxCapacity *= 2;
			data.reserve(maxCapacity);
		}
		data.push_back(value);
		++actualCapacity;
	}

	void pop() {
		int value = data.back();
		data.pop_back();
		--actualCapacity;
	}
	void head() {
		int value = data.front();
		data.erase(data.begin());
		--actualCapacity;
	}
	void del(int index) {
		data.erase(data.begin() + index);
		--actualCapacity;
	}

	int getActualCapacity(){
		return actualCapacity;
	}

	void printAll() const {
		for (int i = 0; i < actualCapacity; ++i) {
			cout << data[i];
			if (i < actualCapacity - 1) {
				cout << " ";
			}
		}

		cout << endl;
	}

};

int main() {
	int n;
	cin >> n;

	DynamicArray dynArray(n);

	int value_p, value_q;;

	do {
		cin >> value_p;
		dynArray.push(value_p);
	} while (cin.get() != '\n');

	do {
		cin >> value_q;
		dynArray.push(value_q);
	} while (cin.get() != '\n');

	int index;
	cin >> index;
	dynArray.del(index);

	cout << dynArray.getActualCapacity() << endl;
	dynArray.printAll();

	dynArray.pop();
	dynArray.head();
	dynArray.printAll();

	return 0;
}



//***********************************************//
#include <iostream>
#include <vector>

class DynamicArray {
private:
    std::vector<int> data;
    int maxCapacity;
    int actualCapacity;

public:
    DynamicArray(int initialCapacity) : maxCapacity(initialCapacity), actualCapacity(0) {
        data.reserve(initialCapacity); // 预留初始容量
    }

    void push(int value) {
        if (actualCapacity >= maxCapacity) {
            // 假设当实际容量达到最大容量时，最大容量翻倍增长
            maxCapacity *= 2;
            data.reserve(maxCapacity);
        }
        data.push_back(value);
        ++actualCapacity;
    }

    int pop() {
        if (actualCapacity == 0) {
            throw std::runtime_error("Cannot pop from an empty array.");
        }
        int value = data.back();
        data.pop_back();
        --actualCapacity;
        return value;
    }

    int head() {
        if (actualCapacity == 0) {
            throw std::runtime_error("Cannot remove head from an empty array.");
        }
        int value = data.front();
        data.erase(data.begin());
        --actualCapacity;
        return value;
    }

    void del(int index) {
        if (index < 0 || index >= actualCapacity) {
            throw std::out_of_range("Index out of range.");
        }
        data.erase(data.begin() + index);
        --actualCapacity;
    }

    int& operator[](int index) {
        if (index < 0 || index >= actualCapacity) {
            throw std::out_of_range("Index out of range.");
        }
        return data[index];
    }

    const int& operator[](int index) const {
        if (index < 0 || index >= actualCapacity) {
            throw std::out_of_range("Index out of range.");
        }
        return data[index];
    }

    int getActualCapacity() const {
        return actualCapacity;
    }

    void printAll() const {
        for (int i = 0; i < actualCapacity; ++i) {
            std::cout << data[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    int n;
    std::cout << "Enter initial size of the dynamic array: ";
    std::cin >> n;

    DynamicArray dynArray(n);

    int p, value;
    std::cout << "Enter number of elements to push (p >= " << n << "): ";
    std::cin >> p;

    for (int i = 0; i < p; ++i) {
        std::cout << "Enter element to push: ";
        std::cin >> value;
        dynArray.push(value);
    }

    std::cout << "Enter number of additional elements to push (q >= " << p << "): ";
    std::cin >> p; // Reusing p for simplicity
    for (int i = 0; i < p; ++i) {
        std::cout << "Enter element to push: ";
        std::cin >> value;
        dynArray.push(value);
    }

    int index;
    std::cout << "Enter index to delete: ";
    std::cin >> index;
    dynArray.del(index);

    std::cout << "Actual capacity of the dynamic array: " << dynArray.getActualCapacity() << std::endl;
    dynArray.printAll();

    dynArray.pop();
    dynArray.printAll();

    int headValue = dynArray.head();
    std::cout << "Removed head value: " << headValue << std::endl;
    dynArray.printAll();

    return 0;
}

