数组合并去重并排序
法一
#include<stdio.h>
int main()
{
	int a[150], b[150], c[400], m, n, t;
	scanf("%d %d", &m, &n);
	for (int i = 0; i < m; i++)
	{
		scanf("%d", &a[i]);
	}
	for (int j = 0; j < n; j++)
	{
		scanf("%d", &b[j]);
	}
	for (int i = 0; i < m; i++)
	{
		c[i] = a[i];
	}
	for (int i = 0; i < n; i++)
	{
		c[i + m] = b[i];
	}
	for (int j = 0; j < m + n - 1; j++)
	{
		for (int i = 0; i < m + n - 1; i++)
		{
			if (c[i] > c[i + 1])
			{
				t = c[i];
				c[i] = c[i + 1];
				c[i + 1] = t;
			}
		}
	}
	for (int i = 0; i < m + n; i++)
	{
			if (c[i] != c[i + 1])
			{
				if (i != m + n - 1)
				{
					printf("%d ", c[i]);
				}
				else
				{
					printf("%d", c[i]);
				}
			}
	}
	return 0;
}



法二
#include<iostream>
using namespace std;
//void bubsort(int a[],int M=0) {
//		for (int i = 0; i < M; i++) {
//			for (int j = M - 1; j > i; j--) {
//				if (a[j] < a[j - 1]) {
//					swap(a[j], a[j - 1]);
//				}
//			}
//		}
//   }
int main() {
	int M, N, a;
	int jud;
	cin >> M >> N;
	int A[200];
	int B[100];
	int C[200];
	for (int i = 0; i < M; i++) {
		cin >> A[i];
	}
	for (int j = 0; j < N; j++) {
		cin >> B[j];
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (B[i] == A[j]) {
				jud = 0;
			}
			else {
				jud = 1;
			}
		}
		if (jud == 1) {
			A[M] = B[i];
			M++;
		}
		else {
			break;
		}
	}
for (int i = M - 1; i > 0; i--) {
		for (int j = 0; j < i; j++) {
			if (A[j] > A[j + 1]) {
				int k = A[j];
				A[j] = A[j + 1];
				A[j + 1] = k;
			}
		}
	}
	int m = 0;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < M;j++) {
			
			if (A[i+1]!=A[i]) {
				C[m] = A[i];
				m++;
				i++;
			}
		}
	}
	for (int i = 0; i < m; i++) {
		cout << C[i] ;
		if (i == m - 1) {
			break;
		}
		cout << " ";
	}
}







法三
define   _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <math.h>
using namespace std;
int main()
{
	int a, b, M, N;
	scanf("%d%d", &M, &N);
	int arr1[100];
	int arr2[100];
	int arr3[200];
	for (int i = 0; i <M; i++)
	{
		scanf("%d", &arr1[i]);
	}
	for (int i = 0; i <N; i++)
	{
		scanf("%d", &arr2[i]);
	}
	for (int i = 0; i <= M - 1; i++)
	{
		arr3[i] = arr1[i];
	}
	for (int i = 0; i <= N - 1; i++)
	{
		arr3[i + M] = arr2[i];
	}

	for (int t = 1; t <= M + N; t++)
	{
		for (int m = M + N - 1; m >= 1; m--)
		{
			if (arr3[m] < arr3[m - 1])
			{
				a = arr3[m - 1];
				arr3[m - 1] = arr3[m];
				arr3[m] = a;
			}
		}
	}
	int c = arr3[M + N - 1];
	for (int i = 0; i <= M + N - 1; i++)
	{
		for (int k = i + 1; k <= M + N - 1; k++)
		{
			if (arr3[i] == arr3[k])
			{
				arr3[k] = c;
			}
		}
	}

	for (int t = 1; t <= M + N; t++)
	{
		for (int m = M + N - 1; m >= 1; m--)
		{
			if (arr3[m] < arr3[m - 1])
			{
				b = arr3[m - 1];
				arr3[m - 1] = arr3[m];
				arr3[m] = b;
			}
		}
	}
	int n;
	for (int i = 0;; i++)
	{
		if (arr3[i] == c)
		{
			n = i;
			break;
		}
	}

	for (int i = 0; i <= n - 1; i++)
	{
		printf("%d", arr3[i]);
		printf(" ");
	}
	printf("%d", arr3[n]);
	return 0;
}