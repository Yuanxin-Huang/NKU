Array splitting

total submissions: 319timespassed: 98timespassing rate: 30.72%

memory limit: 104857600(BYTE)time limit: 100(MS)input limit: 1000(line)output limit: 1000(line)
question description

Given an array of integers of length 2n,  your task is to divide them into n pairs, such as (A1, B1) , (A2, B2) , ... , (An, Bn) such that the sum of Min(Ai, Bi) from 1 to n is maximized.

Guidance:

1. Min(A,B) means the small one in A and B.

2. The first input will be a even number which means the length of the array.

3. Here's an example:

    Input: 4 1 2 3 4

        Let us try all possible combinations.

        1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3

        2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3

        3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4

        So the maximized sum should be 4.

    Output:4



sample inpput and output
样例1
input:
4
1
2
3
4
output:
4
样例2
input:
2
0
99
output:
0








#include<stdio.h>
#include<stdlib.h>
int miner(const void*a,const void*b)
{
	return(*(int*)a - *(int*)b);
}
int ma(int* nums, int Size)
{
	qsort(nums, Size, sizeof(int), miner);
	int sum = 0;
	for (int i = 0; i < Size; i += 2)
	{
		sum += nums[i];
	}
	return sum;
}
int main()
{
	int n,  sum = 0;
	scanf("%d", &n);
    int* b = (int*)malloc(n * sizeof(int));
	for (int i = 0; i < n; i++)
	{
		scanf("%d", &b[i]);
	}
	int c = ma(b, n);
	printf("%d", c);
	free(b);
	return 0;
}