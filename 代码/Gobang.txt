#include <graphics.h>
#include <conio.h>
#include <math.h>
#include <iostream>
#include<stdlib.h>
#include <algorithm>
#include<mmsystem.h>
#pragma comment(lib,"Winmm.lib")
using namespace std;

#define N 19
#define block_width 25
#define margin 30
#define board_width 
#define board_height
int currentPlayer = 1;//1 for BLACK,-1 for WHITE
int total_count = 0; //Calculate total number of chesses

int chessBox[N][N] = { 0 };
int backBox[N][N] = { 0 };
int color=0;//1为黑，-1为白

double checkBound = block_width * 0.4; 
int clickRow, clickCol;

int X_0 = 0, Y_0 = 0;
int lastBlack[2];
int lastWhite[2];

int human, AI;
int humanScore[N][N];
int aiScore[N][N];

int aiColor;
int humanColor;

int scoreMap[N][N] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,
	0,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,
	0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,
	0,1,2,3,4,5,5,5,5,5,5,5,5,5,4,3,2,1,0,
	0,1,2,3,4,5,6,6,6,6,6,6,6,5,4,3,2,1,0,
	0,1,2,3,4,5,6,7,7,7,7,7,6,5,4,3,2,1,0,
	0,1,2,3,4,5,6,7,8,8,8,7,6,5,4,3,2,1,0,
	0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,
	0,1,2,3,4,5,6,7,8,8,8,7,6,5,4,3,2,1,0,
	0,1,2,3,4,5,6,7,7,7,7,7,6,5,4,3,2,1,0,
	0,1,2,3,4,5,6,6,6,6,6,6,6,5,4,3,2,1,0,
	0,1,2,3,4,5,5,5,5,5,5,5,5,5,4,3,2,1,0,
	0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,
	0,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,
	0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,
	0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

};

void drawEveryBlock(int x, int y);
void drawblock();
void initBoard();
void drawChess(int row, int col, int color);
bool checkClick(ExMessage msg);
int checkLimit(int n);
bool judgeWin(int clickRow, int clickCol, int checkColor);
void initialize();
void caculateScore();
void humanPlay();
void aiPlay();
void start1();
void start2();
void begin();


//画方格
void drawEveryBlock(int x, int y)
{
	int left, top, right, bottom;
	left = margin+ block_width * backBox[x][0];
	top = margin + block_width * backBox[x][1];
	right = left + block_width;
	bottom = top + block_width;

	rectangle(left, top, right, bottom);
}

void drawblock()
{
	setlinestyle(PS_SOLID, 1);
	setlinecolor(BLACK);
	for (int i = 0; i < 18; ++i)
	{
		for (int j = 0; j < 18; ++j)
		{
			backBox[i][0] = i ;
			backBox[i][1] = j ;
			drawEveryBlock(i, j);
		}
	}
}


//初始化棋盘
void initBoard() {

	int boardColor = RGB(244,164,95);
	
	setbkcolor(boardColor);
	cleardevice();
	//小黑点
	for (int i = 3; i <= 15; i += 6) {
		for (int j = 3; j <= 15; j += 6) {
			setfillcolor(BLACK);
			solidcircle(i * block_width + margin, j * block_width + margin, 4);
		}
	}
	drawblock();
	//num
	TCHAR s[20];
	for (int i = 0; i < 19; i++)
	{
		int num = i+1;

		setbkmode(TRANSPARENT);
		settextcolor(BLACK);
		_stprintf_s(s, _T("%d"), num);
		outtextxy(margin + i * block_width - 3, margin - 15, s);
	}
	//number
	TCHAR s1[20];
	for (int i = 0; i < 19; i++)
	{
		char c = 'A'+i;

		setbkmode(TRANSPARENT);
		settextcolor(BLACK);
		_stprintf_s(s1, _T("%c"),c);
		outtextxy(margin -12, margin +i*block_width-8, s1);
	}
}
//画出棋子
void drawChess(int row, int col, int color) {
	int x = margin + col * block_width;
	int y = margin + row * block_width;

			if (color == 1) {
				setfillcolor(BLACK);
				solidcircle(x, y, 12);
			}
			else {
				setfillcolor(WHITE);
				solidcircle(x, y, 12);
			}	
}
//落子
bool checkClick(ExMessage msg) {
	int x = msg.x;
	int y = msg.y;
	int col = (x - margin) / block_width;
	int row = (y - margin) / block_width;
	int leftTopX = margin + col * block_width;
	int leftTopY = margin + row * block_width;
	double disLT, disLB, disRT, disRB;
	//Calculate 4 distances
	disLT = sqrt((x - leftTopX) * (x - leftTopX) + (y - leftTopY) * (y - leftTopY));
	disLB = sqrt((x - leftTopX) * (x - leftTopX) + (y - leftTopY - block_width) * (y - leftTopY - block_width));
	disRT = sqrt((x - leftTopX-block_width) * (x - leftTopX-block_width) + (y - leftTopY) * (y - leftTopY));
	disRB = sqrt((x - leftTopX-block_width) * (x - leftTopX-block_width) + (y - leftTopY - block_width) * (y - leftTopY - block_width));
		//Check if the distance is smaller than the boundary
	if (disLT < checkBound) {
		clickCol = col;
		clickRow = row;

	}
	else if (disLB < checkBound) {
		clickCol = col;
		clickRow = row + 1;

	}
	else if (disRT < checkBound) {
		clickCol = col + 1;
		clickRow = row;

	}

	else if (disRB < checkBound) {
		clickCol = col + 1;
		clickRow = row + 1;

	}
	else
		return false;

		if (clickCol > N || clickRow > N)
			return false;

	if (chessBox[clickRow][clickCol]==0) {
		chessBox[clickRow][clickCol] = color;
		return true;
	}
	else {
		
		return false;
	}
}
//防止超出最大边界
int checkLimit(int n) {
	if (n >= N) {
		return N - 1;
	}
	else if (n < 0) {
		return 0;
	}
	else
		return n;
}
//判断输赢
bool judgeWin(int clickRow,int clickCol,int checkColor) {
	int i = 0;
	int j = 0;
	int chess_Count = 0; 
	//行获胜
	for (j = checkLimit(clickCol - 4); j <= checkLimit(clickCol + 4); j++) {
		i = clickRow;
		if (chessBox[i][j] != checkColor) {
			chess_Count = 0;
		}
		else if (chessBox[i][j] == checkColor) {
			chess_Count += 1;
		}
		if (chess_Count >= 5) {
			return true;
		}
	}
	chess_Count = 0;
	//列获胜
	for (i = checkLimit(clickRow - 4); i <= checkLimit(clickRow + 4); i++) {
		j = clickCol;
		if (chessBox[i][j] != checkColor) {
			chess_Count = 0;
		}
		else if (chessBox[i][j] == checkColor) {
			chess_Count += 1;
		}
		if (chess_Count >=5) {
			return true;
		}
	}
	chess_Count = 0;
	//y=x
	for (j = checkLimit(clickCol - 4), i = checkLimit(clickRow + 4); j <= checkLimit(clickCol + 4); j++,i--) {
		
		if (chessBox[i][j] != checkColor) {
			chess_Count = 0;
		}
		else if (chessBox[i][j] == checkColor) {
			chess_Count += 1;
		}
		if (chess_Count >=5) {
			return true;
		}
		
	}
	chess_Count = 0;
//y=-x
	for (i = checkLimit(clickRow - 4), j = checkLimit(clickCol -4); i <= checkLimit(clickRow + 4); i++,j++) {
		
		if (chessBox[i][j] != checkColor) {
			chess_Count = 0;
		}
		else if (chessBox[i][j] == checkColor) {
			chess_Count += 1;
		}
		if (chess_Count >=5) {
			return true;
		}
	}

	return false;
}

//初始化chessBox以便重来
void initialize() {
	memset(humanScore, 0, sizeof(humanScore));
	memset(aiScore, 0, sizeof(aiScore));
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			chessBox[i][j] = 0;
			humanScore[i][j] = scoreMap[i][j];
			aiScore[i][j] = scoreMap[i][j];
		}
	}
	
}
//人机对战
void calculateScore() {
	int humanNum = 0;
	int aiNum = 0;
	int emptyNum = 0;
	int directs[4][2] = { {1,0},{1,1},{0,1},{-1,1} };


	memset(humanScore, 0, sizeof(humanScore));
	memset(aiScore, 0, sizeof(aiScore));

	//for (int i = 0; i < N; i++) {
	//	for (int j = 0; j < N; j++) {
	//		humanScore[i][j] = scoreMap[i][j];
	//		aiScore[i][j] = scoreMap[i][j];
	//	}
	//}

	//Scan the board, calculate the score.
	for (int row = 0; row < N; row++) {
		for (int col = 0; col < N; col++) {
			humanScore[row][col] = scoreMap[row][col];
			aiScore[row][col] = scoreMap[row][col];
			if (chessBox[row][col] == 0) {
				for (int y = -1; y <= 1; y++){
					for (int x = -1; x <= 1; x++){//计算humanNum，aiNum与emptyNum{
						/*for (int k = 0; k < 4; k++) {
							int x = directs[k][0];
							int y = directs[k][1];*/
							//reset
						humanNum = 0;
						aiNum = 0;
						emptyNum = 0;

						//Calculate human score. (Forward)

						if ((x == 0 && y != 0) || (y == 0 && x != 0) || (x != 0 && y != 0))
						{
							for (int i = 1; i <= 4; i++)
							{
								int tempRow = row + i * y;
								int tempCol = col + i * x;
								if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == 1)
								{
									humanNum++;
								}
								else if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == 0)
								{
									emptyNum++;
									break;
								}
								else
									break;
							}

							for (int i = 1; i <= 4; i++)
							{
								int tempRow = row - i * y;
								int tempCol = col - i * x;
								if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == 1)
								{
									humanNum++;
								}
								else if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == 0)
								{
									emptyNum++;
									break;
								}
								else
									break;
							}

							if (humanNum == 1)//根据分数评估表计算人的分数
							{
								humanScore[row][col] += 3;
							}
							else if (humanNum == 2)
							{
								if (emptyNum == 1)
								{
									humanScore[row][col] += 5;
								}
								else if (emptyNum == 2)
								{
									humanScore[row][col] += 50;
								}
							}
							else if (humanNum == 3)
							{
								if (emptyNum == 1)
								{
									humanScore[row][col] += 200;
								}
								else if (emptyNum == 2)
								{
									humanScore[row][col] += 500;
								}
							}
							else if (humanNum == 4)
							{
								humanScore[row][col] += 10000;
							}

							emptyNum = 0;
							//Calculate AI score. (Forward)
							for (int i = 1; i <= 4; i++)
							{
								int tempRow = row + i * y;
								int tempCol = col + i * x;
								if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == -1)
								{
									aiNum++;
								}
								else if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == 0)
								{
									emptyNum++;
									break;
								}
								else
									break;
							}
							//Calculate human score. (Backward)
							for (int i = 1; i <= 4; i++)
							{
								int tempRow = row - i * y;
								int tempCol = col - i * x;
								if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == -1)
								{
									aiNum++;
								}
								else if (tempRow >= 0 && tempRow < N && tempCol >= 0 && tempCol < N && chessBox[tempRow][tempCol] == 0)
								{
									emptyNum++;
									break;
								}
								else
									break;
							}

							if (aiNum == 0)
							{
								aiScore[row][col] += 3;
							}
							if (aiNum == 1)
							{
								aiScore[row][col] += 5;
							}
							else if (aiNum == 2)
							{
								if (emptyNum == 1)
								{
									aiScore[row][col] += 50;
								}
								else if (emptyNum == 2)
									aiScore[row][col] += 200;
							}
							else if (aiNum == 3)
							{
								if (emptyNum == 1)
								{
									aiScore[row][col] += 500;
								}
								else if (emptyNum == 2)
								{
									aiScore[row][col] += 10000;
								}
							}
							else if (aiNum == 4)
							{
								aiScore[row][col] += 100000;
							}

						}

					}
				}

			}
		}
	}
}

void aiClick(){
	calculateScore();
	int humanMaxScore = 0;
	int aiMaxScore =0;
	int aiMaxCount = 0;
	int humanMaxCount=0;
	int humanRow, humanCol;
	int aiRow, aiCol;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (humanMaxScore < humanScore[i][j]) {
				humanMaxScore = humanScore[i][j];
				humanRow = i;
				humanCol = j;

			}

			if (aiMaxScore < aiScore[i][j]) {
				aiMaxScore = aiScore[i][j];
				aiRow = i;
				aiCol = j;

			}
			
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (humanMaxScore == humanScore[i][j]) {
				humanMaxCount++;
			}

			if (aiMaxScore == aiScore[i][j]) {
				aiMaxCount++;
			}
		}
	}

		if (aiMaxScore>=humanMaxScore) {
			if (aiMaxCount > 1) {
				chessBox[humanRow][humanCol] = aiColor;
				drawChess(humanRow, humanCol, aiColor);
			}
			else {
				chessBox[aiRow][aiCol] = aiColor;
				drawChess(aiRow, aiCol, aiColor);
			}
		}
		else if(aiMaxScore<humanMaxScore){
			if (humanMaxCount > 1) {
				chessBox[aiRow][aiCol] = aiColor;
				drawChess(aiRow, aiCol, aiColor);
			}
			else {
				chessBox[humanRow][humanCol] = aiColor;
				drawChess(humanRow, humanCol, aiColor);
			}
		}	
}
/*
void AIdown()
{
	calculateScore();
	int Aimax = 0,ax,ay, Humanmax = 0,hx,hy;
	for (int i = 0; i < 15; i++)
	{
		for (int j = 0; j < 15; j++)
		{
			if(Aimax<=AIScore[i][j]&&cb.chessBox[i][j]==0)
			{
				Aimax = AIScore[i][j];
				ax = i;
				ay = j;
			}
			if (Humanmax <= humanScore[i][j]&&cb.chessBox[i][j]==0)
			{
				Humanmax = humanScore[i][j];
				hx = i;
				hy = j;
			}
		}
	}
	if (Aimax > Humanmax)
	{
		cb.chessnum++;
		cb.chessBox[ax][ay] = Che;
		drawChess(ax, ay);
		cb.turnEnd=CheckWin(ax, ay);
	}
	else
	{
		cb.chessnum++;
		cb.chessBox[hx][hy] = Che;
		drawChess(hx, hy);
		cb.turnEnd=CheckWin(hx, hy);
	}
}*/

void GameOver(ExMessage m) {

	m = getmessage(EM_MOUSE);
	for (int row = 0; row < N; row++) {
		for (int col = 0; col < N; col++) {

			if (judgeWin(row, col, chessBox[row][col])) {

				if (chessBox[row][col] == 1) {

					IMAGE BLACKwin;
					loadimage(&BLACKwin, "BLACK.jpg", 300, 140);
					putimage(180, 220, &BLACKwin);

					HWND hwnd = GetHWnd();
					int ret = 0;
					ret = MessageBox(hwnd, "黑棋获胜\n重来一局吗？", "游戏结束", MB_YESNO | MB_ICONQUESTION);
					if (ret == IDYES) {
						cleardevice();
						initBoard();
						initialize();

						continue;
					}
					else begin();
				}
				else if (chessBox[row][col] == -1) {

					IMAGE WHITEwin;
					loadimage(&WHITEwin, "WHITE.jpg", 300, 140);
					putimage(180, 220, &WHITEwin);


					HWND hwnd = GetHWnd();
					int ret = 0;
					ret = MessageBox(hwnd, "白棋获胜\n重来一局吗？", "游戏结束", MB_YESNO | MB_ICONQUESTION);
					if (ret == IDYES) {
						cleardevice();
						initBoard();
						initialize();
						continue;
					}
					else begin();
				}
			}

			else if (WM_KEYDOWN) {
				if (m.vkcode == VK_ESCAPE)
					exit(0);
			}

		}
	}
}

//由于是黑棋先手，先设置成人先手，ai后手，即是人黑，ai白
void aiPlay() {
	initgraph(800, 600);
	initBoard();
	color = 1;
	humanColor = 1;
	aiColor = -1;
	while (1) {
		ExMessage m;
		m = getmessage(EM_MOUSE);
		mciSendString("open ./luo.mp3", NULL, 0, NULL);
				

		if (m.message == WM_LBUTTONDOWN && checkClick(m)) {
			
			drawChess(clickRow, clickCol, humanColor);
			aiClick();
			
			GameOver(m);
		
		}
	}
}
	
//黑棋先手
void humanPlay() {
	initgraph(800, 600);
	initBoard();
	color = 1;
	while (1) {
		ExMessage m;
		m = getmessage(EM_MOUSE);

		if (m.message == WM_LBUTTONDOWN && checkClick(m)) {

			drawChess(clickRow, clickCol, color);
			color *= -1;

			GameOver(m);
			
		}

		/*_getch();
		closegraph();*/
	}
}
void start1() {
	initgraph(1000, 600);
	//setbkcolor(RGB(160,82,45));
	cleardevice();


	IMAGE begin;
	loadimage(&begin, "begin2.jpg", 1000, 600);
	putimage(0, 0, &begin);

	_getch();
	closegraph();
}
void start2() {
	//initgraph(1000, 600);
	////setbkcolor(RGB(160,82,45));
	//cleardevice();
	//

	//IMAGE begin;
	//loadimage(&begin,"begin2.jpg", 1000,600);
	//putimage(0, 0, &begin);

	//_getch();
	//closegraph();


	setbkcolor(RGB(160,82,45));
	cleardevice();
	IMAGE begin1;
	loadimage(&begin1, "begin.jpg", 450, 200);
	putimage(150, 0, &begin1);

	
	

	setbkmode(TRANSPARENT);
	settextcolor(YELLOW);
	settextstyle(50, 25, "楷体");
	outtextxy(240,300,"人人对战");
	outtextxy(240, 380, "人机对战");
	/*ExMessage m;
	m = getmessage(EM_MOUSE);
	MOUSEMSG Mouse = GetMouseMsg();
	int x = m.x, y = m.y;
	if (x >= 240 && x << 290 && y >= 300 && y <= 325) {
		cout << 1;
		closegraph();
		humanPlay();
	}
	else if (x >= 240 && x << 290 && y >= 380 && y <= 405) {
		cout << 0;
		closegraph();
		aiPlay();
	}

	system("pause");*/
	
	
}
void begin() {
	start1();
	initgraph(800, 500);
	start2();
	int a1 = 220, b1 = 315, a2 = 220, b2 = 335, a3 = 245, b3 = 325;
	
	setfillcolor(YELLOW);
	POINT pts[] = { {a1, b1}, {a2, b2}, {a3,b3 } };
	fillpolygon(pts, 3);
	while (1) {
		char input = _getch();
		if (input == 's') {
			b1 += 80;
			b2 += 80;
			b3 += 80;
			if (b1 > 415 || b2 > 415 || b3 > 415) {
				a1 = 220, b1 = 315, a2 = 220, b2 = 335, a3 = 245, b3 = 325;
			}
			POINT pts1[] = { {a1, b1}, {a2, b2}, {a3,b3 } };
			start2();
			setfillcolor(YELLOW);
			fillpolygon(pts1, 3);
			
		}
		else if (input == 'w') {
			a1 = 220, b1 = 315, a2 = 220, b2 = 335, a3 = 245, b3 = 325;
			POINT pts1[] = { {a1, b1}, {a2, b2}, {a3,b3 } };
			start2();
			setfillcolor(YELLOW);
			fillpolygon(pts1, 3);
			
		}
		else {
			_getch();
			break;
		}
	}
		
	//system("pause");
		//closegraph();
		if (b3 == 325) humanPlay();
		else aiPlay();
	
}
int main(){
	begin();
	return 0;
}