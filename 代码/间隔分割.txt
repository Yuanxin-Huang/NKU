间隔分割问题

total submissions: 287timespassed: 25timespassing rate: 8.71%

memory limit: 67108864(BYTE)time limit: 1000(MS)input limit: 1000(line)output limit: 1000(line)
question description

第四题

（本次上机考试总分100分，本题30分）


描述

假设：

    有n个讲座，每个讲座都有固定的开始时间和结束时间。
    每个讲座都需要一个报告厅。
    同一时间内只能在一个报告厅举行一场讲座。
    如果第二场讲座的开始时间等于第一场讲座的结束时间，仍然允许在同一个报告厅中举行连续的两场讲座

你需要找到安排所有讲座所需的最小报告厅数量。


输入

第一行是一个正整数n，表示要安排的讲座数量。

接下来的n行中，每行有两个整数，表示每个讲座的开始时间和结束时间。时间从0开始计算。


输出

打印所需的最小报告厅数量

sample inpput and output
样例1
input:
5
1 23
12 28
25 35
27 80
36 50
output:
3
样例2
input:
4
1 3
5 7
5 8
2 5
output:
2

#include <stdio.h>
#include <stdlib.h>

struct Interval {
    int start;
    int end;
};

int compareIntervals(const void* a, const void* b) {
    return ((struct Interval*)a)->start - ((struct Interval*)b)->start;
}

int minMeetingRooms(struct Interval* intervals, int intervalsSize) {
    qsort(intervals, intervalsSize, sizeof(struct Interval), compareIntervals);
    int* endTimes = (int*)malloc(intervalsSize * sizeof(int));
    endTimes[0] = intervals[0].end;
    int count = 1;
    for (int i = 1; i < intervalsSize; i++) {
        int isAssigned = 0;
        for (int j = 0; j < count; j++) {
            if (intervals[i].start >= endTimes[j]) {
                endTimes[j] = intervals[i].end;
                isAssigned = 1;
                break;
            }
        }
        if (!isAssigned) {
            endTimes[count] = intervals[i].end;
            count++;
        }
    }
    free(endTimes);
    return count;
}

int main() {
    int n;
    scanf("%d", &n);
    struct Interval* intervals = (struct Interval*)malloc(n * sizeof(struct Interval));
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &intervals[i].start, &intervals[i].end);
    }
    printf("%d", minMeetingRooms(intervals, n));
    free(intervals);
    return 0;
}