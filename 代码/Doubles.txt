Doubles

total submissions: 69timespassed: 29timespassing rate: 42.03%

memory limit: 10485760(BYTE)time limit: 1000(MS)input limit: 1000(line)output limit: 1000(line)
question description

给出2~15个不同的正整数，计算在这些数里面有多少对数满足一个数是另一个数的两倍。比如给出：

1 4 3 2 9 7 18 22

答案是3，因为2是1的两倍，4是2的两倍，18是9的两倍。

输入：

输入包括多个测试用例。每个测试用例一行，给出2~15个两两不同且小于100的正整数。每一行最后一个数是0，表示这一行的结束，这个数不属于2~15个给定的正整数。输入的最后一行仅给出整数-1，该行表示测试用例的输入结束，不用进行处理。

输出：

对每个测试用例，输出一行，给出有多少对数满足其中一个数是另一个数的两倍。

sample inpput and output
样例1
input:
1 4 3 2 9 7 18 22 0
2 4 8 10 0
7 5 11 13 1 3 0
-1
output:
3
2
0


#include<stdio.h>
int main(void) {
    float a[1000];
    scanf("%f", &a[0]);
    while (a[0] != -1) {
        int sum = 0;
        int n = 1;
        while (a[n - 1] != 0) {
            scanf("%f", &a[n]);
            n++;
        }
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                if (a[i] / a[j] == 2.0 || a[j] / a[i] == 2.0) {
                    sum++;
                }
            }
        }
        printf("%d\n", sum);
        scanf("%f", &a[0]);
    }
    return 0;
}